// prisma/seed.ts
import { PrismaClient } from "@prisma/client";
import { hash } from "bcrypt";

const prisma = new PrismaClient();

async function main() {
  try {
    // Limpar dados existentes (cuidado em produ√ß√£o!)
    await prisma.booking.deleteMany();
    await prisma.maintenanceBlock.deleteMany();
    await prisma.resource.deleteMany();
    await prisma.timeBlock.deleteMany();
    await prisma.user.deleteMany();

    console.log("üßπ Dados existentes removidos");

    // Criar usu√°rios
    const adminPassword = await hash("admin123", 10);
    const userPassword = await hash("user123", 10);

    const admin = await prisma.user.create({
      data: {
        name: "Administrador",
        email: "admin@escola.edu.br",
        password: adminPassword,
        role: "diretor",
      },
    });

    const teacher = await prisma.user.create({
      data: {
        name: "Professor Exemplo",
        email: "professor@escola.edu.br",
        password: userPassword,
        role: "professor",
      },
    });

    console.log("üë• Usu√°rios criados");

    // Criar blocos de hor√°rio
    const timeBlocks = await Promise.all([
      prisma.timeBlock.create({
        data: {
          startTime: "07:30",
          endTime: "08:20",
          label: "1¬™ Aula",
          shift: "morning",
        },
      }),
      prisma.timeBlock.create({
        data: {
          startTime: "08:20",
          endTime: "09:10",
          label: "2¬™ Aula",
          shift: "morning",
        },
      }),
      prisma.timeBlock.create({
        data: {
          startTime: "09:30",
          endTime: "10:20",
          label: "3¬™ Aula",
          shift: "morning",
        },
      }),
      prisma.timeBlock.create({
        data: {
          startTime: "10:20",
          endTime: "11:10",
          label: "4¬™ Aula",
          shift: "morning",
        },
      }),
      prisma.timeBlock.create({
        data: {
          startTime: "11:10",
          endTime: "12:00",
          label: "5¬™ Aula",
          shift: "morning",
        },
      }),
      prisma.timeBlock.create({
        data: {
          startTime: "13:20",
          endTime: "14:10",
          label: "6¬™ Aula",
          shift: "afternoon",
        },
      }),
      prisma.timeBlock.create({
        data: {
          startTime: "14:10",
          endTime: "15:00",
          label: "7¬™ Aula",
          shift: "afternoon",
        },
      }),
      prisma.timeBlock.create({
        data: {
          startTime: "15:30",
          endTime: "16:15",
          label: "8¬™ Aula",
          shift: "afternoon",
        },
      }),
      prisma.timeBlock.create({
        data: {
          startTime: "16:15",
          endTime: "17:00",
          label: "9¬™ Aula",
          shift: "afternoon",
        },
      }),
    ]);

    console.log("‚è∞ Blocos de hor√°rio criados");

    // Criar recursos
    const resources = await Promise.all([
      prisma.resource.create({
        data: {
          name: "Data Show 1",
          type: "equipment",
          category: "datashow",
          location: "Almoxarifado",
          assetId: "DS001",
          description: "Projetor multim√≠dia com HDMI e VGA",
          status: "available",
        },
      }),
      prisma.resource.create({
        data: {
          name: "Data Show 2",
          type: "equipment",
          category: "datashow",
          location: "Almoxarifado",
          assetId: "DS002",
          description: "Projetor multim√≠dia com HDMI e VGA",
          status: "maintenance",
        },
      }),
      prisma.resource.create({
        data: {
          name: 'TV 55"',
          type: "equipment",
          category: "tv",
          location: "Sala dos Professores",
          assetId: "TV001",
          description: "Smart TV com HDMI e Wi-Fi",
          status: "available",
        },
      }),
      prisma.resource.create({
        data: {
          name: "Chromebooks",
          type: "equipment",
          category: "chromebook",
          location: "Almoxarifado",
          quantity: 30,
          assetId: "CB001-030",
          description: "Conjunto de 30 Chromebooks para uso em sala",
          status: "available",
        },
      }),
      prisma.resource.create({
        data: {
          name: "Laborat√≥rio de Inform√°tica",
          type: "spaces",
          category: "lab",
          location: "Bloco B - T√©rreo",
          capacity: 30,
          description: "30 computadores com Windows 10 e pacote Office",
          status: "available",
        },
      }),
      prisma.resource.create({
        data: {
          name: "Biblioteca - Espa√ßo de Eventos",
          type: "spaces",
          category: "library",
          location: "Bloco A - 1¬∫ Andar",
          capacity: 50,
          description: "Espa√ßo para eventos, apresenta√ß√µes e reuni√µes",
          status: "available",
        },
      }),
    ]);

    console.log("üì¶ Recursos criados");

    // Criar alguns agendamentos de exemplo
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);

    const bookings = await Promise.all([
      prisma.booking.create({
        data: {
          resourceId: resources[0].id,
          userId: teacher.id,
          timeBlockId: timeBlocks[1].id,
          date: tomorrow,
          purpose: "Apresenta√ß√£o de projeto para a turma do 9¬∫ ano",
          status: "confirmed",
        },
      }),
      prisma.booking.create({
        data: {
          resourceId: resources[4].id,
          userId: teacher.id,
          timeBlockId: timeBlocks[2].id,
          date: tomorrow,
          purpose: "Aula pr√°tica de inform√°tica",
          status: "confirmed",
        },
      }),
    ]);

    console.log("üìÖ Agendamentos criados");

    // Criar notifica√ß√µes de exemplo (Fase 6)
    console.log("üîî Criando notifica√ß√µes de exemplo...");

    const notifications = [
      {
        userId: admin.id,
        type: "booking_confirmed",
        title: "Agendamento confirmado",
        content:
          "Seu agendamento do Laborat√≥rio de Inform√°tica para amanh√£ √†s 14h foi confirmado.",
        priority: "normal",
        category: "booking",
        actionUrl: "/dashboard/my-bookings",
      },
      {
        userId: admin.id,
        type: "resource_approved",
        title: "Recurso aprovado",
        content:
          "O novo projetor multim√≠dia foi aprovado e est√° dispon√≠vel para agendamento.",
        priority: "high",
        category: "resource",
        actionUrl: "/dashboard/resources",
      },
      {
        userId: admin.id,
        type: "maintenance_scheduled",
        title: "Manuten√ß√£o agendada",
        content:
          "Manuten√ß√£o preventiva do ar-condicionado agendada para sexta-feira.",
        priority: "low",
        category: "maintenance",
        isRead: true,
        readAt: new Date(),
      },
      {
        userId: admin.id,
        type: "system_update",
        title: "Sistema atualizado",
        content:
          "Nova vers√£o do AgendaTech dispon√≠vel com melhorias de performance.",
        priority: "normal",
        category: "system",
      },
      {
        userId: admin.id,
        type: "booking_reminder",
        title: "Lembrete de agendamento",
        content:
          "Voc√™ tem um agendamento amanh√£ √†s 10h no Audit√≥rio Principal.",
        priority: "urgent",
        category: "booking",
        actionUrl: "/dashboard/my-bookings",
      },
    ];

    for (const notificationData of notifications) {
      await prisma.notification.create({
        data: notificationData,
      });
    }

    // Criar prefer√™ncias de comunica√ß√£o de exemplo
    await prisma.communicationPreference.create({
      data: {
        userId: admin.id,
        emailEnabled: true,
        pushEnabled: true,
        whatsappEnabled: false,
        emailFrequency: "immediate",
        reminderTime: 24,
        weekdaysOnly: false,
        categories: JSON.stringify([
          "booking",
          "resource",
          "maintenance",
          "system",
        ]),
      },
    });

    // Criar mensagens internas de exemplo (Fase 6)
    console.log("üí¨ Criando mensagens internas de exemplo...");

    const messages = [
      {
        senderId: admin.id,
        recipientId: teacher.id,
        subject: "Reuni√£o pedag√≥gica - Pr√≥xima semana",
        content:
          "Ol√°! Gostaria de agendar uma reuni√£o pedag√≥gica para discutirmos os novos recursos dispon√≠veis na escola. Voc√™ tem disponibilidade na pr√≥xima semana? Por favor, me informe os melhores hor√°rios para voc√™.",
        priority: "high",
        isRead: false,
      },
      {
        senderId: teacher.id,
        recipientId: admin.id,
        subject: "Re: Reuni√£o pedag√≥gica - Pr√≥xima semana",
        content:
          "Oi! Claro, vamos agendar sim. Tenho disponibilidade na ter√ßa-feira √†s 14h ou na quinta-feira √†s 10h. Qual hor√°rio funciona melhor para voc√™?",
        priority: "normal",
        isRead: true,
        readAt: new Date(),
      },
      {
        senderId: admin.id,
        recipientId: teacher.id,
        subject: "Novos equipamentos chegaram",
        content:
          "Informo que chegaram os novos tablets que foram solicitados. Eles j√° est√£o catalogados no sistema e dispon√≠veis para agendamento. Qualquer d√∫vida sobre como utiliz√°-los, estarei √† disposi√ß√£o.",
        priority: "normal",
        isRead: false,
      },
      {
        senderId: teacher.id,
        recipientId: admin.id,
        subject: "Problema com projetor da sala 205",
        content:
          "Bom dia! O projetor da sala 205 est√° apresentando problemas na imagem (fica tremulando). Poderia verificar se √© poss√≠vel agendar uma manuten√ß√£o? Preciso usar na aula de amanh√£ √†s 8h.",
        priority: "urgent",
        isRead: false,
      },
    ];

    const createdMessages = [];
    for (const messageData of messages) {
      const message = await prisma.internalMessage.create({
        data: messageData,
      });
      createdMessages.push(message);
    }

    // Criar algumas respostas para as mensagens
    await prisma.messageReply.create({
      data: {
        messageId: createdMessages[0].id,
        senderId: teacher.id,
        content:
          "Perfeito! Ter√ßa-feira √†s 14h funciona muito bem para mim. Podemos nos encontrar na sala de coordena√ß√£o?",
      },
    });

    await prisma.messageReply.create({
      data: {
        messageId: createdMessages[3].id,
        senderId: admin.id,
        content:
          "J√° entrei em contato com a equipe t√©cnica. Eles v√£o verificar hoje √† tarde. Como alternativa, voc√™ pode usar o projetor m√≥vel que est√° no almoxarifado.",
      },
    });

    // Criar dados de exemplo para WhatsApp (simulados)
    console.log("üì± Criando hist√≥rico WhatsApp de exemplo...");

    const whatsappMessages = [
      {
        userId: admin.id,
        phoneNumber: "5511999887766",
        message:
          "Lembrete: Reuni√£o de pais e mestres amanh√£ √†s 19h no audit√≥rio.",
        template: "meeting_reminder",
        status: "delivered",
        deliveredAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 horas atr√°s
      },
      {
        userId: admin.id,
        phoneNumber: "5511888776655",
        message:
          "Sua solicita√ß√£o de agendamento do laborat√≥rio foi aprovada para ter√ßa-feira √†s 14h.",
        template: "booking_approved",
        status: "read",
        deliveredAt: new Date(Date.now() - 1 * 60 * 60 * 1000), // 1 hora atr√°s
        readAt: new Date(Date.now() - 30 * 60 * 1000), // 30 min atr√°s
      },
      {
        phoneNumber: "5511777665544",
        message:
          "Bom dia! Gostaria de saber sobre a disponibilidade do audit√≥rio para evento no pr√≥ximo m√™s.",
        status: "received",
      },
    ];

    for (const whatsappData of whatsappMessages) {
      await prisma.whatsAppMessage.create({
        data: whatsappData,
      });
    }

    console.log("‚úÖ Seed conclu√≠do com sucesso!");
    console.log({
      users: { admin, teacher },
      timeBlocksCount: timeBlocks.length,
      resourcesCount: resources.length,
      bookingsCount: bookings.length,
      messagesCount: createdMessages.length,
    });
  } catch (error) {
    console.error("‚ùå Erro durante o seed:", error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main();
