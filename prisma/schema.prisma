generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  role          String    @default("professor")
  image         String?
  phone         String?   // Telefone do usuário
  bio           String?   // Biografia do usuário
  location      String?   // Localização do usuário
  avatar        String?   // Avatar personalizado
  preferences   String?   // Preferências em JSON
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  bookings      Booking[]
  sessions      Session[]
  ratings       ResourceRating[] // Avaliações feitas pelo usuário
  maintenanceReports MaintenanceRecord[] // Relatórios de manutenção criados
  supportTickets SupportTicket[] // Tickets de suporte criados pelo usuário
  // Fase 6 - Comunicação e Notificações
  notifications  Notification[] // Notificações recebidas
  communicationPreference CommunicationPreference? // Preferências de comunicação
  pushSubscriptions PushSubscription[] // Subscrições push
  emailLogs     EmailLog[] // Logs de emails enviados
  whatsappMessages WhatsAppMessage[] // Mensagens WhatsApp
  sentMessages  InternalMessage[] @relation("SentMessages") // Mensagens enviadas
  receivedMessages InternalMessage[] @relation("ReceivedMessages") // Mensagens recebidas
  messageReplies MessageReply[] @relation("MessageReplies") // Respostas de mensagens
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resource {
  id                String             @id @default(cuid())
  name              String
  type              String
  category          String
  location          String
  quantity          Int?
  capacity          Int?
  assetId           String?
  description       String?
  imageUrl          String?
  status            String             @default("available")
  requiresApproval  Boolean            @default(false)
  qrCode            String?            // QR Code gerado automaticamente
  averageRating     Float?             // Média das avaliações
  totalRatings      Int                @default(0)
  maintenanceNotes  String?            // Notas de manutenção
  purchaseDate      DateTime?          // Data de aquisição
  warrantyExpiry    DateTime?          // Vencimento da garantia
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bookings          Booking[]
  maintenanceBlocks MaintenanceBlock[]
  images            ResourceImage[]    // Galeria de imagens
  ratings           ResourceRating[]   // Avaliações dos usuários
  maintenanceHistory MaintenanceRecord[] // Histórico de manutenção
  supportTickets    SupportTicket[]    // Tickets de suporte relacionados
}

// Nova tabela para galeria de imagens dos recursos
model ResourceImage {
  id          String   @id @default(cuid())
  resourceId  String
  imageUrl    String
  caption     String?  // Legenda da imagem
  isPrimary   Boolean  @default(false) // Imagem principal
  order       Int      @default(0)     // Ordem de exibição
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@index([resourceId])
}

// Nova tabela para avaliações dos recursos
model ResourceRating {
  id         String   @id @default(cuid())
  resourceId String
  userId     String
  rating     Int      // 1-5 estrelas
  comment    String?  // Comentário opcional
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([resourceId, userId]) // Um usuário só pode avaliar um recurso uma vez
  @@index([resourceId])
}

// Nova tabela para histórico de manutenção
model MaintenanceRecord {
  id            String   @id @default(cuid())
  resourceId    String
  userId        String   // Quem reportou a manutenção
  type          String   // preventive, corrective, emergency, administrative
  priority      String   // low, medium, high, urgent
  status        String   @default("pending") // pending, in_progress, completed, cancelled
  description   String   // Descrição do problema/serviço
  solution      String?  // Descrição da solução aplicada
  cost          Float?   // Custo da manutenção
  performedBy   String?  // Quem realizou a manutenção
  reportedAt    DateTime @default(now()) // Data do reporte
  scheduledDate DateTime? // Data agendada para manutenção
  startedAt     DateTime? // Data de início da manutenção
  resolvedAt    DateTime? // Data de conclusão
  nextService   DateTime? // Próxima manutenção prevista
  estimatedCost Float?   // Custo estimado
  actualCost    Float?   // Custo real
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  resource      Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([resourceId])
  @@index([userId])
}

model TimeBlock {
  id                String             @id @default(cuid())
  startTime         String
  endTime           String
  label             String
  shift             String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bookings          Booking[]
  maintenanceBlocks MaintenanceBlock[]
}

model Booking {
  id               String    @id @default(cuid())
  resourceId       String
  userId           String
  timeBlockId      String
  date             DateTime
  purpose          String
  status           String    @default("confirmed")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isRecurring      Boolean   @default(false)
  recurringPattern String?
  resource         Resource  @relation(fields: [resourceId], references: [id])
  timeBlock        TimeBlock @relation(fields: [timeBlockId], references: [id])
  user             User      @relation(fields: [userId], references: [id])
}

model MaintenanceBlock {
  id          String    @id @default(cuid())
  resourceId  String
  timeBlockId String
  date        DateTime
  reason      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  resource    Resource  @relation(fields: [resourceId], references: [id])
  timeBlock   TimeBlock @relation(fields: [timeBlockId], references: [id])
}

// Modelo para tickets de suporte
model SupportTicket {
  id          String   @id @default(cuid())
  title       String
  description String
  priority    String   // low, medium, high, urgent
  status      String   @default("open") // open, in_progress, resolved, closed
  userId      String
  resourceId  String?  // Opcional - ticket pode ser sobre um recurso específico
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource    Resource? @relation(fields: [resourceId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([resourceId])
}

// Modelo para notificações (Fase 6)
model Notification {
  id          String    @id @default(cuid())
  userId      String
  type        String    // booking_confirmed, booking_cancelled, resource_approved, maintenance_scheduled, etc.
  title       String
  content     String
  isRead      Boolean   @default(false)
  priority    String    @default("normal") // low, normal, high, urgent
  category    String    @default("general") // booking, resource, maintenance, system
  actionUrl   String?   // URL para redirecionar quando clicado
  metadata    String?   // JSON com dados adicionais
  expiresAt   DateTime? // Data de expiração da notificação
  createdAt   DateTime  @default(now())
  readAt      DateTime? // Data de leitura
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([createdAt])
}

// Modelo para preferências de comunicação (Fase 6)
model CommunicationPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  emailEnabled      Boolean  @default(true)
  pushEnabled       Boolean  @default(true)
  whatsappEnabled   Boolean  @default(false)
  emailFrequency    String   @default("immediate") // immediate, daily, weekly
  reminderTime      Int      @default(24) // Horas antes do agendamento
  weekdaysOnly      Boolean  @default(false) // Apenas dias úteis
  quietHoursStart   String?  // Início do horário silencioso (HH:mm)
  quietHoursEnd     String?  // Fim do horário silencioso (HH:mm)
  categories        String   @default("all") // JSON com tipos de notificação permitidos
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modelo para subscrições push (Fase 6)
model PushSubscription {
  id         String   @id @default(cuid())
  userId     String
  endpoint   String
  p256dh     String
  auth       String
  userAgent  String?
  isActive   Boolean  @default(true)
  deviceInfo String?  // JSON com informações do dispositivo
  createdAt  DateTime @default(now())
  lastUsed   DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@index([userId])
  @@index([isActive])
}

// Modelo para log de emails enviados (Fase 6)
model EmailLog {
  id          String   @id @default(cuid())
  userId      String?
  email       String
  subject     String
  template    String
  status      String   @default("sent") // sent, failed, bounced, delivered
  provider    String   @default("nodemailer") // nodemailer, resend, sendgrid
  messageId   String?  // ID fornecido pelo provedor
  errorMessage String?
  openedAt    DateTime?
  clickedAt   DateTime?
  metadata    String?  // JSON com dados extras
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([email])
  @@index([status])
  @@index([createdAt])
}

// Modelo para histórico de WhatsApp (Fase 6)
model WhatsAppMessage {
  id          String   @id @default(cuid())
  userId      String?
  phoneNumber String
  message     String
  template    String?
  status      String   @default("sent") // sent, delivered, read, failed
  messageId   String?  // ID fornecido pelo WhatsApp
  errorCode   String?
  errorMessage String?
  webhookData String?  // JSON com dados do webhook
  createdAt   DateTime @default(now())
  deliveredAt DateTime?
  readAt      DateTime?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([phoneNumber])
  @@index([status])
  @@index([createdAt])
}

// Modelo para mensagens internas (Fase 6)
model InternalMessage {
  id                String         @id @default(cuid())
  senderId          String
  recipientId       String
  subject           String
  content           String
  priority          String         @default("normal") // low, normal, high, urgent
  isRead            Boolean        @default(false)
  isStarred         Boolean        @default(false)
  isArchived        Boolean        @default(false)
  isDraft           Boolean        @default(false)
  deletedBySender   Boolean        @default(false)
  deletedByRecipient Boolean       @default(false)
  attachments       String?        // JSON string com URLs/paths dos anexos
  readAt            DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  sender            User           @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient         User           @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  replies           MessageReply[]

  @@index([senderId])
  @@index([recipientId])
  @@index([isRead])
  @@index([createdAt])
}

// Modelo para respostas de mensagens (Fase 6)
model MessageReply {
  id          String          @id @default(cuid())
  messageId   String
  senderId    String
  content     String
  attachments String?         // JSON string com URLs/paths dos anexos
  createdAt   DateTime        @default(now())
  message     InternalMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  sender      User            @relation("MessageReplies", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([senderId])
  @@index([createdAt])
}
