generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  role          String    @default("professor")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  bookings      Booking[]
  sessions      Session[]
  ratings       ResourceRating[] // Avaliações feitas pelo usuário
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resource {
  id                String             @id @default(cuid())
  name              String
  type              String
  category          String
  location          String
  quantity          Int?
  capacity          Int?
  assetId           String?
  description       String?
  imageUrl          String?
  status            String             @default("available")
  requiresApproval  Boolean            @default(false)
  qrCode            String?            // QR Code gerado automaticamente
  averageRating     Float?             // Média das avaliações
  totalRatings      Int                @default(0)
  maintenanceNotes  String?            // Notas de manutenção
  purchaseDate      DateTime?          // Data de aquisição
  warrantyExpiry    DateTime?          // Vencimento da garantia
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bookings          Booking[]
  maintenanceBlocks MaintenanceBlock[]
  images            ResourceImage[]    // Galeria de imagens
  ratings           ResourceRating[]   // Avaliações dos usuários
  maintenanceHistory MaintenanceRecord[] // Histórico de manutenção
}

// Nova tabela para galeria de imagens dos recursos
model ResourceImage {
  id          String   @id @default(cuid())
  resourceId  String
  imageUrl    String
  caption     String?  // Legenda da imagem
  isPrimary   Boolean  @default(false) // Imagem principal
  order       Int      @default(0)     // Ordem de exibição
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@index([resourceId])
}

// Nova tabela para avaliações dos recursos
model ResourceRating {
  id         String   @id @default(cuid())
  resourceId String
  userId     String
  rating     Int      // 1-5 estrelas
  comment    String?  // Comentário opcional
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([resourceId, userId]) // Um usuário só pode avaliar um recurso uma vez
  @@index([resourceId])
}

// Nova tabela para histórico de manutenção
model MaintenanceRecord {
  id           String   @id @default(cuid())
  resourceId   String
  description  String   // Descrição do serviço realizado
  cost         Float?   // Custo da manutenção
  performedBy  String?  // Quem realizou
  performedAt  DateTime // Data da manutenção
  nextService  DateTime? // Próxima manutenção prevista
  type         String   // preventiva, corretiva, etc.
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  resource     Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@index([resourceId])
}

model TimeBlock {
  id                String             @id @default(cuid())
  startTime         String
  endTime           String
  label             String
  shift             String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bookings          Booking[]
  maintenanceBlocks MaintenanceBlock[]
}

model Booking {
  id               String    @id @default(cuid())
  resourceId       String
  userId           String
  timeBlockId      String
  date             DateTime
  purpose          String
  status           String    @default("confirmed")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isRecurring      Boolean   @default(false)
  recurringPattern String?
  resource         Resource  @relation(fields: [resourceId], references: [id])
  timeBlock        TimeBlock @relation(fields: [timeBlockId], references: [id])
  user             User      @relation(fields: [userId], references: [id])
}

model MaintenanceBlock {
  id          String    @id @default(cuid())
  resourceId  String
  timeBlockId String
  date        DateTime
  reason      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  resource    Resource  @relation(fields: [resourceId], references: [id])
  timeBlock   TimeBlock @relation(fields: [timeBlockId], references: [id])
}
